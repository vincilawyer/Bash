#############################################################################################################################################################################################
##############################################################################  DockerAPP   ################################################################################################
############################################################################################################################################################################################
######   参数配置   ######
Version=1.00  #版本号  

##### 菜单栏 #####
dockerapp_menu=(
    "ChatGPT-Pandora(可直接使用Openai账号登录)"        'page "ChatGPT-Pandora" "${pandora_menu[@]}"'
    "ChatGPT-Next-Web(接入Openai Api后使用)"          'page "ChatGPT-Next-Web" "${gptnext_menu[@]}"'
    "一键安装\更新所有容器镜像"                          'install_container "$Pandora_name" "$Pandora_image"; install_container "$Chatgpt_name" "$Chatgpt_image"'
)          

#############################################################################################################################################################################################
################################################################################  通用   #################################################################################################
############################################################################################################################################################################################
#### 安装\更新应用
function install_container {
     local docker_name="$1"
     local docker_image="$2"
     tempfile=$(mktemp)
     echo -e "${BLUE}开始下载/更新$docker_image镜像${NC}"
     docker pull "$docker_image" | tee "$tempfile"
     ! [[ "$(cat "$tempfile")" =~ "newer" ]] && ( docker ps | grep "$docker_name" &> /dev/null ) && echo "$docker_name应用当前已是最新镜像，无需更新" && return 
     echo "开始安装容器...请稍候"
     docker stop "$docker_name" &> /dev/null && echo "已停止旧版本容器运行..."
     docker rm "$docker_name" &> /dev/null && echo "已移除旧版本容器..."
     eval "run_$docker_name"  && echo -e "${BLUE}已启动最新$docker_image容器!${NC}"
}


#############################################################################################################################################################################################
##############################################################################   Pandora—Docker  ################################################################################################
############################################################################################################################################################################################
adddat '
#####ChatGPT-Pandora ######
$(pz "Pandora_port")                              #@Chatgpt本地端口#@0-65535#@port_regex 
Pandora_image=\"pengzhile/pandora-next\"               #Chat镜像名称*
Pandora_name=\"Pandora\"                          #Chat容器名称*
'

##### 菜单栏 #####
pandora_menu=(
    "安装\更新Pandora"                       'install_container "$Pandora_name" "$Pandora_image"'
    "设置Pandora配置"                         "set_$Pandora_name"
    "暂停Pandora容器"                            'confirm "是否停止运行$Pandora_name？" "已取消！" || docker stop $Pandora_name'
    "重启Pandora容器"                             "docker stop $Pandora_name;docker start $Pandora_name"
    "移除Pandora容器"                            'docker stop "$Pandora_name"; docker rm "$Pandora_name"'
    )                     

######  运行chatgpt-next-web 镜像 ######
function run_Pandora {

     if docker run -d --restart always --name "$Pandora_name" --net=bridge \
    -p $Pandora_port:$Pandora_port \
    -v $path_user/conf/Pandora/data:/data \
    -v $path_user/conf/Pandora/sessions:/root/.cache/PandoraNext \
    $Pandora_image
        then
            echo "Chatgpt PANDOR安装并启动成功！"
        else 
            echo "启动失败，请重新设置参数配置"
        fi  
}

######  设置chatgpt配置 ######
function set_Pandora {
local conf=(
"Pandora_port"
)
    set_dat ${conf[@]}
    if confirm "是否启动Chatgpt-Pandora并适用最新配置？" "已取消启动"; then return; fi
    docker stop "$Pandora_name" && echo "已停止运行容器"
    docker start "$Pandora_name"  && echo "已重新启动容器"
}

#############################################################################################################################################################################################
##############################################################################   ChatGPT-Next-Web Docker  ################################################################################################
############################################################################################################################################################################################
adddat '
#####Chatgpt-app ######
$(pz "Gpt_port")                              #@Chatgpt本地端口#@0-65535#@port_regex 
$(pz "Chatgpt_api_key")                        #@Chatgpt Api
$(pz "Gpt_code")                               #@授权码
$(pz "Proxy_model")                           #@接口代理模式#@1为正向代理、2为反向代理#@\"[[ \$new_text =~ ^(1|2)\$ ]]\"
$(pz "BASE_URL")                               #@OpenAI接口代理URL#@默认接口为https://api.openai.com#@web_regex
$(pz "PROXY_URL")                              #@Chatgpt本地代理地址#@需要加http前缀#@web_regex
Chatgpt_image=\"yidadaa/chatgpt-next-web\"       #Chat镜像名称*
Chatgpt_name=\"chatgpt\"                                    #Chat容器名称*
'
##### 菜单栏 #####
gptnext_menu=(
    "安装\更新ChatGPT-Next-Web"                          'install_container "$Chatgpt_name" "$Chatgpt_image"'
    "设置ChatGPT-Next-Web配置"                            "set_$Chatgpt_name"
    "暂停ChatGPT-Next-Web容器"                            'confirm "是否停止运行$Chatgpt_name？" "已取消！" || docker stop $Chatgpt_name'
    "重启ChatGPT-Next-Web容器"                             "docker stop $Chatgpt_name;docker start $Chatgpt_name"
    "移除ChatGPT-Next-Web容器"                            'docker stop "$Chatgpt_name"; docker rm "$Chatgpt_name"'
    )                     



######  运行chatgpt-next-web 镜像 ######
function run_chatgpt {
    docker stop $Chatgpt_name >/dev/null 2>&1 && echo "正在重置chatgpt容器..."
    docker rm $Chatgpt_name >/dev/null 2>&1
    if (( Proxy_model==1 )); then 
        if docker run -d --name $Chatgpt_name --restart=always -p $Gpt_port:$Gpt_port \
           -e OPENAI_API_KEY="$Chatgpt_api_key" \
           -e CODE="$Gpt_code" \
           --net=host \
           -e PROXY_URL="$PROXY_URL" \
           $Chatgpt_image
       then
           echo "Chatgpt启动成功！"
       else 
        echo "启动失败，请重新设置参数配置"
       fi  
    elif (( Proxy_model==2 )); then 
        if docker run -d  --name $Chatgpt_name --restart=always -p $Gpt_port:$Gpt_port \
           -e OPENAI_API_KEY="$Chatgpt_api_key" \
           -e ENABLE_BALANCE_QUERY=1 \
           -e CODE="$Gpt_code" \
           -e BASE_URL="$BASE_URL" \
           $Chatgpt_image
       then
           echo "Chatgpt启动成功！"
       else 
        echo "启动失败，请重新设置参数配置"
       fi  

    fi
}

######  设置chatgpt配置 ######
function set_chatgpt {
local conf=(
"Gpt_code"
"Chatgpt_api_key"
"Gpt_port"
"Proxy_model"
"BASE_URL"
"PROXY_URL" 
)
    set_dat ${conf[@]}
    if confirm "是否启动Chatgpt并适用最新配置？" "已取消启动"; then return; fi
    docker stop "$Chatgpt_name" && echo "已停止运行容器"
    docker start "$Chatgpt_name" && echo "已重新启动容器"
}
