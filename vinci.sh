#!/bin/bash 12
############################################################################################################################################################################################
##############################################################################   启动程序源代码   ########################################################################################
############################################################################################################################################################################################
#程序组成结构:1、启动程序（即本程序）,用于下载、启动更新update程序和主程序（该两程序及本程序容错率为0）。
#2、update程序，用于更新、加载配置文件。
#3、主程序，承担程序功能作用。
#程序启动逻辑：
#1、判断当前运行的系统环境，并对shell环境、网络环境、依赖软件进行适配；
#2、载入update程序，在特定条件下对包括启动程序在内的所有程序进行更新，并加载所有配置文件
#3、启动main主程序
############################################################################################################################################################################################
##############################################################################   shell调整环境   ########################################################################################
############################################################################################################################################################################################
#mac系统转为zsh环境。注意，请网站中启动脚本，执行exec语句，新环境将从fi后面的内容开始执行。本地环境执行执行exec语句，新环境将从头开始再次执行本脚本。
if uname -a | grep -q 'Darwin'; then
    [[ $(ps -p $$ -o comm=) == *"bash"* ]] && exec "/bin/zsh" "$0" "$1"
fi

############################################################################################################################################################################################
##################################################################################  基本变量   ###########################################################################################
############################################################################################################################################################################################
####### 版本更新相关参数 ######
Version=2.00 
name_sh="vinci"        
startcode="$1"    #更新指令

####### 定义本脚本名称、应用数据路径 ######
path_dir="$HOME/myfile/${name_sh}_src"    #应用数据文件夹位置名                     
path_list="$path_dir/srclist.dat"          #组件清单存放位置
path_dat="$path_dir/$name_sh.dat"         #配置数据文件路径                                         
mkdir -p "$data_dir"                       #创建应用数据文件夹                                                  

#### 配置文件、程序网址、路径 ####
#仓库-下载链接
link_repositories="https://raw.githubusercontent.com/vincilawyer/My-Shell-Script/main"            
#仓库-文件信息链接
link_reposinfo="https://api.github.com/repos/vincilawyer/My-Shell-Script/contents"      
#update.src文件下载链接及存放位置                               
path_update="/update.src"                                                
#main.src文件下载链接及存放位置                                
path_main="/main.src"                                                    
#vinci.sh启动程序下载链接
link_sh="/vinci.sh" 

####### 颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'


############################################################################################################################################################################################
##############################################################################   不同系统配置及变量   ########################################################################################
############################################################################################################################################################################################
#在bash中$0为脚本自身路径、可能$SHELL为脚本自身运行环境；但在zsh中$ZSH_ARGZERO为脚本自身路径、可能$(ps -p $$ -o comm=)为脚本自身运行环境
clear
####### Debian系统启动程序网址、路径 ######
if uname -a | grep -q 'Debian'; then 
    path_sh="/usr/local/bin/$name_sh"   
    
    CURSHELL="bash"
    echo "检测系统为Debian，当前Shell环境为$SHELL，正在配置中..."

    # 安装依赖件jq
    which "jq" >/dev/null || (echo "正在安装依赖软件JQ..."; apt update; apt install jq -y; echo "依赖件JQ已安装完成！")
    
####### Android Termius系统启动程序网址、路径 ######
elif uname -a | grep -q 'Android'; then 
    path_sh="/data/data/com.termux/files/usr/bin/$name_sh"
    
    CURSHELL="bash"
    echo "检测系统为Android，当前Shell环境为$SHELL，正在配置中..."
    
    # 安装依赖件 ncurses-utils，以支持tput工具
    which "tput" >/dev/null || (echo "正在安装依赖软件ncurses-utils..."; apt update; apt install ncurses-utils -y;echo "依赖件ncurses-utils已安装完成！")
    # 安装依赖件jq
    which "jq" >/dev/null || (echo "正在安装依赖软件JQ..."; apt update; apt install jq -y; echo "依赖件JQ已安装完成！")
                                                                
####### Mac系统启动程序网址、路径 ######
elif uname -a | grep -q 'Darwin'; then 
    path_sh="/usr/local/bin/$name_sh"
    
    CURSHELL="zsh"
    echo "检测系统为Mac，已切换Shell环境为$(ps -p $$ -o comm=)，正在配置中..."
    #允许注释与代码同行
    setopt interactivecomments
    #让数组编号与bash一致，从0开始
    setopt ksh_arrays
    #打开终端网络代理
    export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;export ALL_PROXY=socks5://127.0.0.1:1086

    
###### 其他系统启动程序网址、路径 ######
else 
    CURSHELL="bash"
    echo "未知系统，当前Shell环境为$SHELL，正在配置默认版本中..."
    echo "未知系统"
    sleep 5
fi  


############################################################################################################################################################################################
##############################################################################   脚本退出及错误检测   ########################################################################################
############################################################################################################################################################################################
######  退出函数 ######      
function quit() {
local exitnotice="$1"
local scrname="$2"
local funcname1="$3"
local funcname2="$4"
   if ((exitnotice == 1)); then
        clear
   elif [ -n "$exitnotice" ]; then
        echo -e "${RED}出现错误：$exitnotice。错误代码详见以下：${NC}"
        echo -e "${RED}错误函数为：${FUNCNAME[1]}${NC}"
        echo -e "${RED}调用函数为：${FUNCNAME[2]}${NC}"
        echo -e "${RED}错误模块为：${BASH_SOURCE[1]}${NC}"
   fi            
   echo -e "${GREED}已退出vinci脚本！${NC}"
   exit
}

#######   当脚本错误退出时，启动更新检查   ####### 
function handle_error() {
    echo "脚本运行出现错误！"
    echo -e "${RED}错误代码详见以下：${NC}"
    echo -e "${RED}错误函数为：${FUNCNAME[1]}${NC}"
    echo -e "${RED}调用函数为：${FUNCNAME[2]}${NC}"
    echo -e "${RED}错误模块为：${BASH_SOURCE[1]}${NC}"
    quit
}

#######   当脚本退出   ####### 
function normal_exit() { 
:
}

#######   脚本退出前执行  #######   
trap 'handle_error' ERR
trap 'normal_exit' EXIT

#######   等待函数   #######   
function wait {
    if [[ -z "$1" ]]; then
        echo "请按下任意键继续"
    else
        echo "请查看wait函数，看看是谁调用的：${FUNCNAME[1]}"
    fi
    
    if [[ "$CURSHELL" == *"bash"* ]]; then
        read -n 1 -s input
    elif [[ "$CURSHELL" == *"zsh"* ]]; then
        stty -echo
        read -k 1 input
        stty echo
    fi
}

####错误检测###
function check {
    (( ++n ))
    echo "第$n次检测"
    echo "检测函数:${FUNCNAME[1]}"
    echo "检测位置:${BASH_SOURCE[1]}"
    echo "检测内容如下："
#############################################
echo 启动码 $startcode，$1
echo 路径1：$0 
echo 路径2：$ZSH_NAME，$ZSH_ARGZERO
echo 环境1：$(ps -p $$ -o comm=)  
echo 环境2：$SHELL
#############################################
wait
}

############################################################################################################################################################################################
##############################################################################   依赖函数   ########################################################################################
############################################################################################################################################################################################

#######   基础更新   #######   
function base_load {

      #检测代码是在$PATH中直接运行还是通过网络或其他方式启动,非$PATH直接启动则为更新模式
      [[ "$0" == "$path_sh" ]] || [[ "$ZSH_ARGZERO" == "$path_sh" ]] || startcode=1
      
      #更新模式
     if ((startcode==1)) || ! [ -e "$path_dir/$path_update" ]; then
         echo
         echo "正在启动更新检查程序..."
         #增加时间戳，防止缓存
         if ! curl "$link_update" -o "$path_update" >/dev/null 2>&1 ; then 
              echo "更新检查程序下载失败，请检查网络！" 
              wait
              else
              echo "网络已连接，开始检查..." 
              fi
    
     fi

     #载入更新检查文件，并获取错误输出
     wrongtext="$(source "$path_update" 2>&1 >/dev/null)"
     if [ -n "$wrongtext" ]; then 
          echo "当前更新检查程序缺失或存在语法错误，未能启动主程序，报错内容为：" 
          echo "$wrongtext"
          quit
     else
          source "$path_update"
     fi    

     #更新本程序
     update_load "$path_sh" "$link_def" "$name_sh启动" 2 "$startcode"
    
     #更新主程序   
     update_load "$path_main" "$link_main" "主程序" 1 "$startcode" "main_initial"
     echo 
     if (( startcode == 1 )); then echo -n "更新检查完成，即将进入程序..."; countdown 5; fi

}

####### 文件对比   #####
function filecomp {
    local localfile="$1"     本地文件路径
    local compfile="$2"      网络文件链接为文件下载链接或hash值
    local compmethod="$3"    对比方式，1为sha哈希对比，2为文件直接比较
    if 
}

#######   倒计时   ####### 
function countdown {
    local from=$1
if [[ "$CURSHELL" == *"bash"* ]]; then
    tput sc  # Save the current cursor position
    while (( from >= 0 )); do
        tput rc  # Restore the saved cursor position
        tput el  # Clear from cursor to the end of the line
        printf "%02ds" $from  # Print the countdown
        (( from == 0 )) || { if $(read -s -t 1 -n 1); then break; fi }
        ((from--))
    done
    tput el
    echo
elif [[ "$CURSHELL" == *"zsh"* ]]; then
    echoti sc  # Save the current cursor position
    while (( from >= 0 )); do
        echoti rc  # Restore the saved cursor position
        echoti el  # Clear from cursor to the end of the line
        printf "%02ds" $from  # Print the countdown
        stty -echo   #关闭输入显示
        if read -t 1 -k 1 input; then stty echo;break; fi
        stty echo    #打开输入显示
        from=$(( from-1 ))
    done
    echoti el
    echo
fi    
}

############################################################################################################################################################################################
##############################################################################   开始运行   ########################################################################################
############################################################################################################################################################################################
base_load
main
